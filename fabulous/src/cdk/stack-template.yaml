Resources:
  RegularTable12CC1C05:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkStack/RegularTable/Resource
  VectorTableB2143AA2:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkStack/VectorTable/Resource
  S3BucketSG92452BED:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: CdkStack/S3BucketSG/Resource
  S3BucketUs6FF166E4:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: CdkStack/S3BucketUs/Resource
  SnsRequest661334DC:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: CdkStack/SnsRequest/Resource
  SnsScrapedA213C0F0:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: CdkStack/SnsScraped/Resource
  SnsVector4D4A681C:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: CdkStack/SnsVector/Resource
  SnsResult34ED2408:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: CdkStack/SnsResult/Resource
  SqsScraperF4C64CB8:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkStack/SqsScraper/Resource
  SqsScraperPolicy5D1356E1:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: SnsRequest661334DC
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource:
              Fn::GetAtt:
                - SqsScraperF4C64CB8
                - Arn
        Version: "2012-10-17"
      Queues:
        - Ref: SqsScraperF4C64CB8
    Metadata:
      aws:cdk:path: CdkStack/SqsScraper/Policy/Resource
  SqsScraperCdkStackSnsRequest8E381E1D9C533419:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
          - SqsScraperF4C64CB8
          - Arn
      Protocol: sqs
      TopicArn:
        Ref: SnsRequest661334DC
    DependsOn:
      - SqsScraperPolicy5D1356E1
    Metadata:
      aws:cdk:path: CdkStack/SqsScraper/CdkStackSnsRequest8E381E1D/Resource
  SqsVector9EDC6078:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkStack/SqsVector/Resource
  SqsVectorPolicy94B75129:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: SnsScrapedA213C0F0
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource:
              Fn::GetAtt:
                - SqsVector9EDC6078
                - Arn
        Version: "2012-10-17"
      Queues:
        - Ref: SqsVector9EDC6078
    Metadata:
      aws:cdk:path: CdkStack/SqsVector/Policy/Resource
  SqsVectorCdkStackSnsScraped6C0291955F2BFE49:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
          - SqsVector9EDC6078
          - Arn
      Protocol: sqs
      TopicArn:
        Ref: SnsScrapedA213C0F0
    DependsOn:
      - SqsVectorPolicy94B75129
    Metadata:
      aws:cdk:path: CdkStack/SqsVector/CdkStackSnsScraped6C029195/Resource
  SqsBedrock0879D8A6:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkStack/SqsBedrock/Resource
  SqsBedrockPolicy4D3DE7A9:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: SnsVector4D4A681C
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource:
              Fn::GetAtt:
                - SqsBedrock0879D8A6
                - Arn
        Version: "2012-10-17"
      Queues:
        - Ref: SqsBedrock0879D8A6
    Metadata:
      aws:cdk:path: CdkStack/SqsBedrock/Policy/Resource
  SqsBedrockCdkStackSnsVectorC4C449638FFAD2D9:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
          - SqsBedrock0879D8A6
          - Arn
      Protocol: sqs
      TopicArn:
        Ref: SnsVector4D4A681C
    DependsOn:
      - SqsBedrockPolicy4D3DE7A9
    Metadata:
      aws:cdk:path: CdkStack/SqsBedrock/CdkStackSnsVectorC4C44963/Resource
  ConnectLambdaServiceRole9B2E6A60:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkStack/ConnectLambda/ServiceRole/Resource
  ConnectLambdaServiceRoleDefaultPolicyE5936110:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:PutItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - RegularTable12CC1C05
                - Arn
        Version: "2012-10-17"
      PolicyName: ConnectLambdaServiceRoleDefaultPolicyE5936110
      Roles:
        - Ref: ConnectLambdaServiceRole9B2E6A60
    Metadata:
      aws:cdk:path: CdkStack/ConnectLambda/ServiceRole/DefaultPolicy/Resource
  ConnectLambdaC25CF6D9:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: d00a8cd50c492cec6f209e24dc2cf7f2cf4c0daee00174fb770b122f4a78cc43.zip
      Handler: connect.handler
      Role:
        Fn::GetAtt:
          - ConnectLambdaServiceRole9B2E6A60
          - Arn
      Runtime: nodejs20.x
    DependsOn:
      - ConnectLambdaServiceRoleDefaultPolicyE5936110
      - ConnectLambdaServiceRole9B2E6A60
    Metadata:
      aws:cdk:path: CdkStack/ConnectLambda/Resource
      aws:asset:path: asset.d00a8cd50c492cec6f209e24dc2cf7f2cf4c0daee00174fb770b122f4a78cc43
      aws:asset:is-bundled: false
      aws:asset:property: Code
  MessageLambdaServiceRole48C271E3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkStack/MessageLambda/ServiceRole/Resource
  MessageLambdaServiceRoleDefaultPolicy0A45F4FC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:UpdateItem
              - sns:Publish
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - RegularTable12CC1C05
                  - Arn
              - Ref: SnsRequest661334DC
        Version: "2012-10-17"
      PolicyName: MessageLambdaServiceRoleDefaultPolicy0A45F4FC
      Roles:
        - Ref: MessageLambdaServiceRole48C271E3
    Metadata:
      aws:cdk:path: CdkStack/MessageLambda/ServiceRole/DefaultPolicy/Resource
  MessageLambdaD55E61CB:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: d00a8cd50c492cec6f209e24dc2cf7f2cf4c0daee00174fb770b122f4a78cc43.zip
      Handler: message.handler
      Role:
        Fn::GetAtt:
          - MessageLambdaServiceRole48C271E3
          - Arn
      Runtime: nodejs20.x
    DependsOn:
      - MessageLambdaServiceRoleDefaultPolicy0A45F4FC
      - MessageLambdaServiceRole48C271E3
    Metadata:
      aws:cdk:path: CdkStack/MessageLambda/Resource
      aws:asset:path: asset.d00a8cd50c492cec6f209e24dc2cf7f2cf4c0daee00174fb770b122f4a78cc43
      aws:asset:is-bundled: false
      aws:asset:property: Code
  DisconnectLambdaServiceRole4CE9DB16:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkStack/DisconnectLambda/ServiceRole/Resource
  DisconnectLambdaServiceRoleDefaultPolicyC1BE6B1E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:DeleteItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - RegularTable12CC1C05
                - Arn
        Version: "2012-10-17"
      PolicyName: DisconnectLambdaServiceRoleDefaultPolicyC1BE6B1E
      Roles:
        - Ref: DisconnectLambdaServiceRole4CE9DB16
    Metadata:
      aws:cdk:path: CdkStack/DisconnectLambda/ServiceRole/DefaultPolicy/Resource
  DisconnectLambdaC906C1EF:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: d00a8cd50c492cec6f209e24dc2cf7f2cf4c0daee00174fb770b122f4a78cc43.zip
      Handler: disconnect.handler
      Role:
        Fn::GetAtt:
          - DisconnectLambdaServiceRole4CE9DB16
          - Arn
      Runtime: nodejs20.x
    DependsOn:
      - DisconnectLambdaServiceRoleDefaultPolicyC1BE6B1E
      - DisconnectLambdaServiceRole4CE9DB16
    Metadata:
      aws:cdk:path: CdkStack/DisconnectLambda/Resource
      aws:asset:path: asset.d00a8cd50c492cec6f209e24dc2cf7f2cf4c0daee00174fb770b122f4a78cc43
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ScraperLambdaServiceRoleAA17A547:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkStack/ScraperLambda/ServiceRole/Resource
  ScraperLambdaServiceRoleDefaultPolicy524AAD0F:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: SnsScrapedA213C0F0
        Version: "2012-10-17"
      PolicyName: ScraperLambdaServiceRoleDefaultPolicy524AAD0F
      Roles:
        - Ref: ScraperLambdaServiceRoleAA17A547
    Metadata:
      aws:cdk:path: CdkStack/ScraperLambda/ServiceRole/DefaultPolicy/Resource
  ScraperLambda4C38B115:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: d00a8cd50c492cec6f209e24dc2cf7f2cf4c0daee00174fb770b122f4a78cc43.zip
      Handler: scraper.handler
      Role:
        Fn::GetAtt:
          - ScraperLambdaServiceRoleAA17A547
          - Arn
      Runtime: nodejs20.x
    DependsOn:
      - ScraperLambdaServiceRoleDefaultPolicy524AAD0F
      - ScraperLambdaServiceRoleAA17A547
    Metadata:
      aws:cdk:path: CdkStack/ScraperLambda/Resource
      aws:asset:path: asset.d00a8cd50c492cec6f209e24dc2cf7f2cf4c0daee00174fb770b122f4a78cc43
      aws:asset:is-bundled: false
      aws:asset:property: Code
  VectorLambdaServiceRoleE72051B4:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkStack/VectorLambda/ServiceRole/Resource
  VectorLambdaServiceRoleDefaultPolicy17D97350:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:PutItem
              - sns:Publish
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - VectorTableB2143AA2
                  - Arn
              - Ref: SnsVector4D4A681C
        Version: "2012-10-17"
      PolicyName: VectorLambdaServiceRoleDefaultPolicy17D97350
      Roles:
        - Ref: VectorLambdaServiceRoleE72051B4
    Metadata:
      aws:cdk:path: CdkStack/VectorLambda/ServiceRole/DefaultPolicy/Resource
  VectorLambda8B381029:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: d00a8cd50c492cec6f209e24dc2cf7f2cf4c0daee00174fb770b122f4a78cc43.zip
      Handler: vector.handler
      Role:
        Fn::GetAtt:
          - VectorLambdaServiceRoleE72051B4
          - Arn
      Runtime: nodejs20.x
    DependsOn:
      - VectorLambdaServiceRoleDefaultPolicy17D97350
      - VectorLambdaServiceRoleE72051B4
    Metadata:
      aws:cdk:path: CdkStack/VectorLambda/Resource
      aws:asset:path: asset.d00a8cd50c492cec6f209e24dc2cf7f2cf4c0daee00174fb770b122f4a78cc43
      aws:asset:is-bundled: false
      aws:asset:property: Code
  BedrockLambdaServiceRoleE2062991:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkStack/BedrockLambda/ServiceRole/Resource
  BedrockLambdaServiceRoleDefaultPolicyD8608AE4:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:PutItem
              - s3:PutObject
              - sns:Publish
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - S3BucketUs6FF166E4
                  - Arn
              - Fn::GetAtt:
                  - VectorTableB2143AA2
                  - Arn
              - Ref: SnsResult34ED2408
        Version: "2012-10-17"
      PolicyName: BedrockLambdaServiceRoleDefaultPolicyD8608AE4
      Roles:
        - Ref: BedrockLambdaServiceRoleE2062991
    Metadata:
      aws:cdk:path: CdkStack/BedrockLambda/ServiceRole/DefaultPolicy/Resource
  BedrockLambdaC6729693:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: d00a8cd50c492cec6f209e24dc2cf7f2cf4c0daee00174fb770b122f4a78cc43.zip
      Handler: bedrock.handler
      Role:
        Fn::GetAtt:
          - BedrockLambdaServiceRoleE2062991
          - Arn
      Runtime: nodejs20.x
    DependsOn:
      - BedrockLambdaServiceRoleDefaultPolicyD8608AE4
      - BedrockLambdaServiceRoleE2062991
    Metadata:
      aws:cdk:path: CdkStack/BedrockLambda/Resource
      aws:asset:path: asset.d00a8cd50c492cec6f209e24dc2cf7f2cf4c0daee00174fb770b122f4a78cc43
      aws:asset:is-bundled: false
      aws:asset:property: Code
  LambdaRole3A44B857:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkStack/LambdaRole/Resource
  WebSocketApi34BCF99B:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
    Metadata:
      aws:cdk:path: CdkStack/WebSocketApi/Resource
  WebSocketApiconnectRouteConnectIntegrationPermission39398969:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ConnectLambdaC25CF6D9
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: WebSocketApi34BCF99B
            - /*$connect
    Metadata:
      aws:cdk:path: CdkStack/WebSocketApi/$connect-Route/ConnectIntegration-Permission
  WebSocketApiconnectRouteConnectIntegration7F1E0FDE:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi34BCF99B
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
                - ConnectLambdaC25CF6D9
                - Arn
            - /invocations
    Metadata:
      aws:cdk:path: CdkStack/WebSocketApi/$connect-Route/ConnectIntegration/Resource
  WebSocketApiconnectRoute846149DD:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi34BCF99B
      AuthorizationType: NONE
      RouteKey: $connect
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: WebSocketApiconnectRouteConnectIntegration7F1E0FDE
    Metadata:
      aws:cdk:path: CdkStack/WebSocketApi/$connect-Route/Resource
  WebSocketApidisconnectRouteDisconnectIntegrationPermissionAE705904:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - DisconnectLambdaC906C1EF
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: WebSocketApi34BCF99B
            - /*$disconnect
    Metadata:
      aws:cdk:path: CdkStack/WebSocketApi/$disconnect-Route/DisconnectIntegration-Permission
  WebSocketApidisconnectRouteDisconnectIntegration94C91381:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi34BCF99B
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
                - DisconnectLambdaC906C1EF
                - Arn
            - /invocations
    Metadata:
      aws:cdk:path: CdkStack/WebSocketApi/$disconnect-Route/DisconnectIntegration/Resource
  WebSocketApidisconnectRouteC181A19C:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi34BCF99B
      AuthorizationType: NONE
      RouteKey: $disconnect
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: WebSocketApidisconnectRouteDisconnectIntegration94C91381
    Metadata:
      aws:cdk:path: CdkStack/WebSocketApi/$disconnect-Route/Resource
  WebSocketApiMessageRouteRouteMessageIntegrationPermissionA523816A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - MessageLambdaD55E61CB
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: WebSocketApi34BCF99B
            - /*MessageRoute
    Metadata:
      aws:cdk:path: CdkStack/WebSocketApi/MessageRoute-Route/MessageIntegration-Permission
  WebSocketApiMessageRouteRouteMessageIntegration3B8225AA:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi34BCF99B
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
                - MessageLambdaD55E61CB
                - Arn
            - /invocations
    Metadata:
      aws:cdk:path: CdkStack/WebSocketApi/MessageRoute-Route/MessageIntegration/Resource
  WebSocketApiMessageRouteRoute97772369:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi34BCF99B
      AuthorizationType: NONE
      RouteKey: MessageRoute
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: WebSocketApiMessageRouteRouteMessageIntegration3B8225AA
    Metadata:
      aws:cdk:path: CdkStack/WebSocketApi/MessageRoute-Route/Resource
  DevStage520A913F:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: WebSocketApi34BCF99B
      AutoDeploy: true
      StageName: dev
    Metadata:
      aws:cdk:path: CdkStack/DevStage/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/11QTW/CMAz9LdyDN8p22BGQJu3GWqQdkZuaytAmXZ2AUNT/PiVdAXHJ+4j9YieDxdsHvM7wInNdneYNlxAKh/qk8CL7UF0NtrYqIeywbEhtDiaRQckSwtrrE7lo/rMR1iixwAiEne1Yp65ECl+K7rlzbE10H/Wg5FcgfHvy6Z2RpHNrG9bXmznKQTXYlhVC+PRGT4mPfEt9yyIpm7GFkNtxhYT30ClPlnsUISewiqCw4xodXfB6ziD8UFnYuN6q49gV4ebl1ju6yy/jqO5xGuRJPhUXDus0ViLDoHIS63tNKo0RXTZ1apwuNgezsabi8d+MrQiO8nLOMniHxewozPPeG8ctQT7iH6o9F/DpAQAA
    Metadata:
      aws:cdk:path: CdkStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

